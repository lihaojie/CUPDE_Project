//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using UniRx;
using DG.Tweening;
using SuperKid.Utils;

namespace SuperKid
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.UI;
    using QFramework;
    using Entity;
    public class DeviceStatusPanelData : QFramework.UIPanelData
    {
    }
    
    public partial class DeviceStatusPanel : QFramework.UIPanel, SeekCtrl.IOnValueChange
    {
        private ResLoader mResLoader = ResLoader.Allocate();

        
        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
            throw new System.NotImplementedException ();
        }

        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as DeviceStatusPanelData ?? new DeviceStatusPanelData();
            Meteors.transform.DOLocalMoveX(-2370, 5f).SetLoops(-1, LoopType.Restart);
            Meteors.transform.DOLocalMoveY(-470, 5f).SetLoops(-1, LoopType.Restart);
            ResquestDeviceStatus(-1);
            
            BtnConnect.OnClickAsObservable().Subscribe(_ =>
            {
                AudioManager.PlaySound("Button_Audio");
                UIMgr.OpenPanel<BindConfirmBootPanel>(new BindConfirmBootPanelData(),UITransitionType.CIRCLE, this);
            }).AddTo(this);

            BtnBack.OnClickAsObservable().Subscribe(_ =>
            {
                AudioManager.PlaySound("Button_Audio");
                Back();
            }).AddTo(this);
            SimpleEventSystem.GetEvent<UpdateVol>()
                .Subscribe(_ =>
                {
                    if (_.Message.IsNotNullAndEmpty())
                    {
                        DeviceConnectStatus(true);
                        DeviceVolModel model = SerializeHelper.FromJson<DeviceVolModel>(_.Message);
                        if (model.isUpdate)
                        {
                            SliderDeviceVoice.Slider.value = model.progress;
                            TextProgress.text = string.Format("{0}%", model.progress);
                        }
                        else
                        {
                            UIMgr.OpenPanel<TipPanel>(new TipPanelData()
                            {
                                action = TipAction.DeviceLostControl,
                                message = "家庭组内" + model.babyRelation + "正在控制此设备",
                                isHideCancelButton = true,
                                removeConfirmCallback = true,
                                strConfirm = "知道了"
                            });
                        }
                    }
                }).AddTo(this);
            if (Application.platform == RuntimePlatform.Android)
            {
                AndroidForUnity.CallAndroidForQueryVol();
            }
            else if (Application.platform == RuntimePlatform.IPhonePlayer)
            {
                Dictionary<string, object> param = new Dictionary<string, object>();
                Dictionary<string, object> subParam = new Dictionary<string, object>();
                param.Add("method", IOSClientUtil.QueryDeviceVolume);
                param.Add("params", subParam);
                Debug.Log("params ========" + subParam);
                IOSClientUtil.CommonMethodCallIOSClient(param.ToJson());
            }
            SliderDeviceVoice.setIOnValueChange(this);
        }
        
        /**
         * 音量变化改变文本显示
         */
        public void onValueChange(int progress)
        {
            TextProgress.text = string.Format("{0}%", progress);
        }

        /**
         * 手指抬起，发送消息更新设备音量
         */
        public void onValueStop(int progress)
        {
            ResquestDeviceStatus(progress);
        }

        public void UpdateDeviceBattery( int value)
        {
            int batteryValue = value;
            
            string batteryStr = String.Empty;
            string batteryImgName = String.Empty;
            if (batteryValue > 80)
            {
                batteryStr = @"满电量";
                batteryImgName = @"ic_deviceBatteryHigh";
            }
            else if (batteryValue >= 20 && batteryValue <= 80)
            {
                batteryStr = @"电量充足";
                batteryImgName = @"ic_deviceBatteryMid";
            }
            else
            {
                batteryStr = @"低电量";
                batteryImgName = @"ic_deviceBatteryLow";
            }

            TextBattery.text = batteryStr;
            var texture2D = mResLoader.LoadSync<Texture2D>(batteryImgName);
            ImageBattery.sprite = Sprite.Create(texture2D,new Rect(0,0,texture2D.width,texture2D.height),Vector2.one *0.5f);
            

        }

        private void DeviceConnectStatus(bool isOnLine)
        {
            string connectStr = String.Empty;
            string connectImg = String.Empty;
            if (isOnLine)
            {
                connectStr = "设备已连接";
                connectImg = "ic_deviceWiFiConnect";
            }
            else
            {
                connectStr = "设备未连接";
                connectImg = "ic_deviceWiFiunConnect";
            }
            
            TextConnect.text = connectStr;
            var texture2D = mResLoader.LoadSync<Texture2D>(connectImg);
            ImageConnect.sprite = Sprite.Create(texture2D,new Rect(0,0,texture2D.width,texture2D.height),Vector2.one *0.5f);
        }

        private void ResquestDeviceStatus(int progress)
        {
            Dictionary<string, object> paramDict = new Dictionary<string, object>();
            paramDict.Add("deviceId", PlayerPrefsUtil.GetDeviceId());
            paramDict.Add("userId", PlayerPrefsUtil.GetUserId());
            HttpUtil.GetWithSign<DeviceModel>(UrlConst.GetDeviceStatus, paramDict)
                .Subscribe(response =>
                    {
                        if (progress != -1)
                        {
                            if (response.deviceOnline)
                            {
                                if (Application.platform == RuntimePlatform.Android)
                                {
                                    AndroidForUnity.CallAndroidForUpdateVol((progress).ToString("F0"));
                                }
                                else if (Application.platform == RuntimePlatform.IPhonePlayer)
                                {
                                    Dictionary<string, object> param = new Dictionary<string, object>();
                                    Dictionary<string, object> subParam = new Dictionary<string, object>();
                                    subParam.Add("valume", progress);
                                    param.Add("method", IOSClientUtil.ExchangeDeviceVolume);
                                    param.Add("params", subParam);
                                    Debug.Log("params ========" + subParam);
                                    IOSClientUtil.CommonMethodCallIOSClient(param.ToJson());
                                }
                            }
                            else
                            {
                                SliderDeviceVoice.Slider.value = 0;
                                TextProgress.text = string.Format("{0}%", 0);
                                CommonUtil.toast("dola未连接，请确认开机联网哦~");
                            }

                        }
                        if (response.deviceOnline)
                        {
                            DeviceConnectStatus(true);
                        }
                        else
                        {
                            DeviceConnectStatus(false);
                        }
                        UpdateDeviceBattery(response.deviceStatus.battery);
                    }
                    , e =>
                    {
                        if (e is HttpException)
                        {
                            HttpException http = e as HttpException;
                            Log.E("弹吐司" + http.Message);
                        }
                    }).AddTo(this);
        }
        

        protected override void OnOpen(QFramework.IUIData uiData)
        {
        }
        
        protected override void OnShow()
        {
        }
        
        protected override void OnHide()
        {
        }
        
        protected override void OnClose()
        {
            mResLoader.Recycle2Cache();
            mResLoader = null;
        }

    }
}
