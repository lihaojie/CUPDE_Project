//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DG.Tweening;
using SuperKid.Utils;
using QFramework;
using UniRx;
using UIMgr = QFramework.UIMgr;

namespace SuperKid
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.UI;
    using Utils;
    using Entity;

    public class ConnectDevicePanelData : QFramework.UIPanelData
    {
        public string SSIDStr;
        public string SSIDPWD;
        
    }
    
    public partial class ConnectDevicePanel : QFramework.UIPanel
    {
        public int mTotalTime = 90;
        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as ConnectDevicePanelData ?? new ConnectDevicePanelData();
            Meteors.transform.DOLocalMoveX(-2370, 5f).SetLoops(-1, LoopType.Restart);
            Meteors.transform.DOLocalMoveY(-470, 5f).SetLoops(-1, LoopType.Restart);
            
            Dictionary<string, object> param = new Dictionary<string, object>();
            
            param.Add("ssid", mData.SSIDStr);
            param.Add("password", mData.SSIDPWD); 
            param.Add("token", PlayerPrefsUtil.GetToken()); 
            param.Add("userId", PlayerPrefsUtil.GetUserId());
            if (Application.platform == RuntimePlatform.Android)
            {
                AndroidForUnity.CallAndroidForStartDeviceConnect(mData.SSIDStr, mData.SSIDPWD);
            }
            else if (Application.platform == RuntimePlatform.IPhonePlayer)
            {
                IOSClientUtil.StartBindDevice(param.ToJson());
            }
            
            StartCoroutine(CountDown());

            BtnBack.OnClickAsObservable().Subscribe(_ =>
            {
                UIMgr.OpenPanel<TipPanel>(new TipPanelData()
                {
                    action = TipAction.BindingBack,
                    message = "返回后联网将不在继续，确认终止操作?",
                    strConfirm = "确定",
                    strCancel = "继续等待",
                    strTitle = "终止配网",
                });
                
            }).AddTo(this);
            
            BtnCheckWiFi.OnClickAsObservable().Subscribe(_ =>
            {
                UIMgr.OpenPanel<BindCheckWIFIPanel>(new BindCheckWIFIPanelData(), UITransitionType.NULL);
            }).AddTo(this);

            SimpleEventSystem.GetEvent<BindDeviceResult>().Subscribe(res =>
            {
                
                BindDeviceModel model = res.Model;

                if (Application.platform == RuntimePlatform.Android)
                {
                    if (model.status == 1)
                    {
                        StartResquestForBind(model.deviceId);
                    }
                    else
                    {
                        ConnectResult(false);
                    }
                }else if (Application.platform == RuntimePlatform.IPhonePlayer)
                {
                    if (model.requestTag == 2 && model.deviceId.IsNotNullAndEmpty())
                    {
                        StartResquestForBind(model.deviceId);
                    }

                    if (model.requestTag == 1)
                    {
                        CommonUtil.toast("获取音频接口出错");
                    }
                }
            }).AddTo(this);
            
            SimpleEventSystem.GetEvent<TipConfirmClick>()
                .Subscribe(_ =>
                {
                    if (_.GetAction == TipAction.BindDevice)
                    {
                        ShowMainPanel();
                    }
                    else if (_.GetAction == TipAction.BindingBack)
                    {
                        StopAllCoroutines();
                        if (Application.platform == RuntimePlatform.IPhonePlayer)
                        {
                            IOSClientUtil.StopBindDevice("");
                        }
                        else if (Application.platform == RuntimePlatform.Android)
                        {
                            AndroidForUnity.CallAndroidForStopDeviceConnect();
                        }
                        Back();
                    }
                    
                }).AddTo(this);
        }

        
        private void StartResquestForBind(String deviceId)
        {
            Dictionary<string, object> paramDict = new Dictionary<string, object>();
            paramDict.Add("deviceId", deviceId);
            paramDict.Add("userId", PlayerPrefsUtil.GetUserId());
            HttpUtil.PostWithSign<BindResultModel>(UrlConst.Bind, paramDict)
                .Subscribe(response =>
                    {
                        if (response.bindRelation == 1)
                        {
                            UIMgr.OpenPanel<TipPanel>(new TipPanelData()
                            {
                                action = TipAction.BindDevice,
                                message = "该账号已绑定其他设备，\n如需绑定当前设备，需解绑后重新绑定",
                                isHideCancelButton = true,
                                strConfirm = "知道了"
                            });
                            StopAllCoroutines();
                        }
                        else
                        {
                            ConnectResult(true);
                            StopAllCoroutines();
                        }
                        /**
                         * 停止播放音频
                         */
                        if (Application.platform == RuntimePlatform.IPhonePlayer)
                        {
                            IOSClientUtil.StopBindDevice("");
                        }
                        else if (Application.platform == RuntimePlatform.Android)
                        {
                            AndroidForUnity.CallAndroidForStopDeviceConnect();
                        }
                        
                    }
                    , e =>
                    {
                        if (e is HttpException)
                        {
                            ConnectResult(false);
                            HttpException http = e as HttpException;
                            Log.E("弹吐司" + http.Message);
                        }
                    }).AddTo(this);
        }
        

        private void RequestDeviceID(bool isLast)
        {
            Dictionary<string, object> paramDict = new Dictionary<string, object>();
            paramDict.Add("userId", PlayerPrefsUtil.GetUserId());
            HttpUtil.GetWithSign<string>(UrlConst.DeviceIdByUserId, paramDict)
                .Subscribe(response =>
                    {
                        if (response.IsNotNullAndEmpty())
                        {
                            StartResquestForBind(response);
                        }
                        else
                        {
                            if (isLast)
                            {
                                if (Application.platform == RuntimePlatform.Android)
                                {
                                    AndroidForUnity.CallAndroidForStopDeviceConnect();
                                }
            
                                if (Application.platform == RuntimePlatform.IPhonePlayer)
                                {
                                    IOSClientUtil.StopBindDevice("");
                                }
                                Log.I("配网超时 的失败");
                                ConnectResult(false);
                            }
                        }
                    }, e =>
                {
                    if (e is HttpException)
                    {
                        if (isLast)
                        {
                            ConnectResult(false);
                        }
                        HttpException http = e as HttpException;
                        Log.E("弹吐司" + http.Message);
                        CommonUtil.toast(http.Message);
                    }
                }).AddTo(this);
        }
        

        private void ShowMainPanel()
        {
            CommonUtil.OpenCloudMain(this);
        }
        
        
        private IEnumerator CountDown()
        {
            mTotalTime = 90;
            while (mTotalTime > 0)
            {
                yield return new WaitForSeconds(1);
                mTotalTime--;
                // switch (mTotalTime)
                // {
                //     case 50 :
                //         RequestDeviceID(false);
                //         break;
                //     case 40 :
                //         RequestDeviceID(false);
                //         break;
                //     case 30 :
                //         RequestDeviceID(false);
                //         break;
                //     case 20 :
                //         RequestDeviceID(false);
                //         break;
                //     case 10 :
                //         RequestDeviceID(false);
                //         break;
                //     case 0 :
                //         RequestDeviceID(true);
                //         break;
                // }
                if (mTotalTime <=81 && mTotalTime %2 == 0)
                {
                    if (mTotalTime == Decimal.Zero)
                    {
                        RequestDeviceID(true);
                    }
                    else
                    {
                        RequestDeviceID(false);
                    }
                }
                Debug.Log("倒计时剩余"+mTotalTime.ToString());
            }
        }

        private void ConnectResult(bool isSuccess)
        {
            SimpleEventSystem.Publish(new CloseBindCheckWIFI());
            if (isSuccess)
            {
                ModifyConnectImageStatueSuccess();
            }
            else
            {
                ModifyConnectImageStatusFail();
            }
        }
        
        private void ModifyConnectImageStatueSuccess()
        { 
            Log.I("ModifyConnectImageStatueSuccess");
            ConnectingContent.gameObject.SetActive(false);
            TextConnect.text = "绑定成功";
            ConnectIngImage.SetInteger("type",1);
            Log.I("ConnectIngImage");

            Observable.Timer(TimeSpan.FromSeconds(2))
                .Subscribe(_ =>
                {
                    ShowMainPanel();
                }).AddTo(this);
        }
        
        private void ModifyConnectImageStatusFail()
        { 
            ConnectingContent.gameObject.SetActive(false);
            TextConnect.text = "绑定失败";
            ConnectIngImage.SetInteger("type",2);
            
            Observable.Timer(TimeSpan.FromSeconds(2))
                .Subscribe(_ =>
                {
                    Back();
                }).AddTo(this);
        }
        
        protected override void OnClose()
        {
            Meteors.DOKill();
            StopAllCoroutines();
        }
    }
}
