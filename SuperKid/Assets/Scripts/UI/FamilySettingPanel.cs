//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using QFramework;
using SuperKid.Utils;
using UniRx;

namespace SuperKid
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.UI;
    
    
    public class FamilySettingPanelData : QFramework.UIPanelData
    {
        public int type; //0：移除，1：转让
    }
    
    public partial class FamilySettingPanel : QFramework.UIPanel
    {
        public ListView listViewVertical;
        public ToggleGroup mToggleGroup;
        private ResLoader mResLoader  = ResLoader.Allocate();
        private FamilyModel mFamilyModel;
        
        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as FamilySettingPanelData ?? new FamilySettingPanelData();
            // please add init code here
            StartRequestForFindMemberInfo();
            BtnConfirm.onClick.AddListener(() =>
            {
                AudioManager.PlaySound("Button_Audio");
                Log.I("mFamilyId: " + mFamilyModel.id);
                if (mFamilyModel.IsNull())
                {
                    CommonUtil.toast("请选择成员");
                }
                else
                {
                    if (mData.type == 0)
                    {
                        UIMgr.OpenPanel<TipPanel>(new TipPanelData()
                        {
                            action = TipAction.FamilySubtract,
                            message = "确定移除该家长？"
                        });
                    }
                    else
                    {
                        UIMgr.OpenPanel<TipPanel>(new TipPanelData()
                        {
                            action = TipAction.FamilyTransfer,
                            message = "确定将管理员转让给所选对象？"
                        });
                    }
                }
            });
            BtnCancel.onClick.AddListener(() =>
            {
                AudioManager.PlaySound("Button_Audio");
                Back();
            });
            SimpleEventSystem.GetEvent<TipConfirmClick>()
                .Subscribe(_ =>
                {
                    if (_.GetAction == TipAction.FamilySubtract)
                    {
                        StartRequestForDoRejectMember();
                    }
                }).AddTo(this);
            SimpleEventSystem.GetEvent<TipConfirmClick>()
                .Subscribe(_ =>
                {
                    if (_.GetAction == TipAction.FamilyTransfer)
                    {
                        StartRequestForDoTransferManager();
                    }
                }).AddTo(this);
        }
        
        private void StartRequestForDoTransferManager()
        {
            Dictionary<string, object> param = new Dictionary<string, object>();
            param.Add("userId",mFamilyModel.id);
            param.Add("deviceId",PlayerPrefsUtil.GetDeviceId());
            HttpUtil.PostWithSign<int>(UrlConst.DoTransferManager,param)
                .Subscribe(response =>
                {
                    CommonUtil.toast("转让成功");
                    SimpleEventSystem.Publish(new UpdateBaseInfoDate(true));
                    Back();
                }, e =>
                {
                    if (e is HttpException)
                    {
                        HttpException http = e as HttpException;
                        Log.E("弹吐司" + http.Message);
                    }
                }).AddTo(this);
        }
        
        private void StartRequestForDoRejectMember()
        {
            Dictionary<string, object> param = new Dictionary<string, object>();
            param.Add("userId",mFamilyModel.id);
            param.Add("deviceId",PlayerPrefsUtil.GetDeviceId());
            HttpUtil.PostWithSign<int>(UrlConst.DoRejectMember,param)
                .Subscribe(response =>
                {
                    CommonUtil.toast("移除成功");
                    SimpleEventSystem.Publish(new UpdateBaseInfoDate(true));
                    Back();
                }, e =>
                {
                    if (e is HttpException)
                    {
                        HttpException http = e as HttpException;
                        Log.E("弹吐司" + http.Message);
                    }
                }).AddTo(this);
        }
        
        private void StartRequestForFindMemberInfo()
        {
            Dictionary<string, object> param = new Dictionary<string, object>();
            param.Add("relBabyId",PlayerPrefsUtil.UserInfo.relBabyId);
            HttpUtil.GetWithSign<List<FamilyModel>>(UrlConst.FindMemberInfo,param)
                .Subscribe(response =>
                {
                    Log.I(response.ToJson());
                    if (response.IsNotNull())
                    {
                        foreach (var model in response)
                        {
                            if (model.id != PlayerPrefsUtil.GetUserId())
                            {
                                AddItem(model);
                            }
                        }
                    }
                }, e =>
                {
                    if (e is HttpException)
                    {
                        HttpException http = e as HttpException;
                        Log.E("弹吐司" + http.Message);
                    }
                }).AddTo(this);
        }

        
        private void AddItem(FamilyModel model)
        {
            mResLoader.LoadSync<GameObject>("ItemInfoFamilySettingPrefab")
                .Instantiate()
                .transform
                .Identity()
                .ApplySelfTo(item =>
                {
                    ItemFamilySetting itemFamilySetting = item.GetComponent<ItemFamilySetting>();
                    itemFamilySetting.SetContent(model, mData.type);
                    itemFamilySetting.Toggle.group = mToggleGroup;
                    itemFamilySetting.Toggle.onValueChanged.AddListener((bool value) =>
                        OnToggleClick(model, value));
                    listViewVertical.AddItem(item.gameObject);
                }); 

        }

        
        public void OnToggleClick(FamilyModel model, bool value)  
        {
            if (value)
            {
                mFamilyModel = model;
            }
        }  

        
        protected override void OnOpen(QFramework.IUIData uiData)
        {
        }
        
        protected override void OnShow()
        {
        }
        
        protected override void OnHide()
        {
        }
        
        protected override void OnClose()
        {
            mResLoader.Recycle2Cache();
            mResLoader = null;
        }
    }
}
