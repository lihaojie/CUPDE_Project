//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using Newtonsoft.Json;
using SuperKid.Entity;
using SuperKid.Utils;

namespace SuperKid
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.UI;
    using UniRx;
    using QFramework;
    public class MainPanelData : QFramework.UIPanelData
    {
        public int ShopAction; // 1英语,2 语文
    }
    
    public partial class MainPanel : QFramework.UIPanel
    {
        private ResLoader mResLoader = ResLoader.Allocate();
        public UserInfoModel UserInfo;
        private List<MedalModel.MedalBean> mMedalList;
        private GameObject mMainAnimationGo;
        private Texture2D mTexture2DHBoy, mTexture2DHGirl;
        private int ScanQrCodePlanId, ScanQrCodeMonth;
        
        
        protected override void OnInit(QFramework.IUIData uiData)
        {
            if (Application.platform == RuntimePlatform.Android)
            {
                AudioManager.SetMusicOn();
                AudioManager.PlayMusic("Main_BG_Music");
                AndroidForUnity.CallAndroidHideSplash();
            }
            else if (Application.platform == RuntimePlatform.IPhonePlayer)
            {
                Dictionary<string, object> param = new Dictionary<string, object>();
                Dictionary<string, object> subParam = new Dictionary<string, object>();
                param.Add("method", IOSClientUtil.MainPanelOnInit);
                param.Add("params", subParam);
                IOSClientUtil.CommonMethodCallIOSClient(param.ToJson());

                if (App.IsFirstInitialize == 1)
                {
                    AudioManager.SetMusicOn();
                    AudioManager.PlayMusic("Main_BG_Music");
                }
            }
            else
            {
                AudioManager.SetMusicOn();
                AudioManager.PlayMusic("Main_BG_Music");
            }
            


            mTexture2DHBoy = mResLoader.LoadSync<Texture2D>("ic_head_boy");
            mTexture2DHGirl = mResLoader.LoadSync<Texture2D>("ic_head_girl");
            mMainAnimationGo = mResLoader.LoadSync<GameObject>("MainAnimation")
                .Instantiate()
                .transform
                .LocalScale(1.4f,1.4f,1.4f)
                .Position(-11.0f,-5.0f,0)
                .gameObject;
            mData = uiData as MainPanelData ?? new MainPanelData();
            BtnGift.onClick.AddListener(() =>
            {
                AudioManager.PlaySound("Button_Audio");
                UIMgr.OpenPanel<GiftListPanel>(new GiftListPanelData(),UITransitionType.CLOUD, this);
            });
            BtnSetting.onClick.AddListener(() =>
            {
                AudioManager.PlaySound("Button_Audio");
                UIMgr.OpenPanel<SettingPanel>(new SettingPanelData(),UITransitionType.CLOUD, this);
            });
            BtnListen.onClick.AddListener(() =>
            {
                AudioManager.PlaySound("Button_Audio");
                StartRequestForGetResourcePageUrl();
            });
            BtnMessage.onClick.AddListener(() => {
                // UIMgr.OpenPanel<AttendanceAddAudioPanel>();
             });
            BtnRobot.OnClickAsObservable().Subscribe((unit =>
            {
                AudioManager.PlaySound("Button_Audio");
                UIMgr.OpenPanel<DeviceStatusPanel>(new DeviceStatusPanelData(),UITransitionType.CLOUD, this);
            })).AddTo(this);
            BtnIntegral.onClick.AddListener(() =>
            {
                AudioManager.PlaySound("Button_Audio");
                Debug.Log("每日任务");
                UIMgr.OpenPanel<DailyTaskPanel>(new DailyTaskPanelData(),UITransitionType.CLOUD, this);
            });
            BtnMedal.onClick.AddListener(() =>
            {
                AudioManager.PlaySound("Button_Audio");
                Debug.Log("勋章");
                UIMgr.OpenPanel<DailyTaskPanel>(new DailyTaskPanelData()
                {
                    showMedal = 2,
                }, UITransitionType.CLOUD, this);
            });
            BtnScan.onClick.AddListener(() =>
            {
                AudioManager.PlaySound("Button_Audio");
                if (Application.platform == RuntimePlatform.Android)
                {
                    NativeGallery.RequestPermission((result, action) =>
                    {
                        if (result == (int) NativeGallery.Permission.Granted)
                        {
                            Dictionary<string, object> param = new Dictionary<string, object>();
                            Dictionary<string, object> subParam = new Dictionary<string, object>();
                            param.Add("target", AppConst.SCAN);
                            param.Add("params", subParam);
                            AndroidForUnity.CallAndroidStartActivityForAnim(param.ToJson(), AppConst.ANIM_CLOUD);
                        }
                    }, (int) NativeAction.Camera);
                }
                else if (Application.platform == RuntimePlatform.IPhonePlayer)
                {
                    Dictionary<string, object> param = new Dictionary<string, object>();
                    Dictionary<string, object> subParam = new Dictionary<string, object>();
                    param.Add("target", AppConst.SCAN_IOS);
                    param.Add("params", subParam);
                    IOSClientUtil.CallIOSClient(param.ToJson());
                }
            });
            BtnChineseShop.onClick.AddListener(() =>
            {
                AudioManager.PlaySound("Button_Audio");
                if (UserInfo.chPlanId != 0)
                {
                    StartRequestForGetPlanInfo(UserInfo.chPlanId, 0);
                }
                else
                {
                    UIMgr.OpenPanel<TipPanel>(new TipPanelData()
                    {
                        action = TipAction.PlanScan,
                        message = "该计划未解锁\n需扫描盒子二维码进行解锁！",
                        strConfirm = "去扫描",
                        strTitle = "解锁提示"
                    });
                    LoadingManager.GetInstance().DismissLoading();
                }
            });
            BtnEnglishShop.onClick.AddListener(() =>
            {
                AudioManager.PlaySound("Button_Audio");
                if (UserInfo.enPlanId != 0)
                {
                    StartRequestForGetPlanInfo(UserInfo.enPlanId, 0);
                }
                else
                {
                    UIMgr.OpenPanel<TipPanel>(new TipPanelData()
                    {
                        action = TipAction.PlanScan,
                        message = "该计划未解锁\n需扫描盒子二维码进行解锁！",
                        strConfirm = "去扫描",
                        strTitle = "解锁提示"
                    });
                    LoadingManager.GetInstance().DismissLoading();
                }
            });
            BtnLearningShop.onClick.AddListener(() =>
            {
                AudioManager.PlaySound("Button_Audio");
                if (UserInfo.qgPlanId != 0)
                {
                    StartRequestForGetPlanInfo(UserInfo.qgPlanId, 0);
                }
                else
                {
                    StartRequestForDrawPowerSpecialPlan();
                }
            });
            BtnPhotoWall.onClick.AddListener(() =>
            {
                AudioManager.PlaySound("Button_Audio");
                UIMgr.OpenPanel<WorksWallPanel>(new WorksWallPanelData(),UITransitionType.CLOUD, this);
            });
            
            BtnAddRobot.onClick.AddListener(() =>
            {
                UIMgr.OpenPanel<BindConfirmBootPanel>(new BindConfirmBootPanelData(){}, UITransitionType.CLOUD, this);
            });
            SimpleEventSystem.GetEvent<ScanQRResult>()
                .Subscribe(_ =>
                {
                    if (_.ScanResult.IsNotNullAndEmpty())
                    {
                        StartRequestForScanQR(_.ScanResult);
                    }
                }).AddTo(this);
            //扫码动画关闭监听
             SimpleEventSystem.GetEvent<CollectGiftBoxPanelClosed>()
                .Subscribe(_ =>
                {
                    if (_.CollectGiftBoxType == CollectGiftBoxType.ChineseLearningPlan|| _.CollectGiftBoxType == CollectGiftBoxType.EnglishLearningPlan)
                    {
                        StartRequestForGetPlanInfo(ScanQrCodePlanId, ScanQrCodeMonth);
                    }
                }).AddTo(this);
             SimpleEventSystem.GetEvent<TipConfirmClick>()
                .Subscribe(_ =>
                {
                    if (_.GetAction == TipAction.PlanScan)
                    {
                        if (Application.platform == RuntimePlatform.Android)
                        {
                            NativeGallery.RequestPermission((result, action) =>
                            {
                                if (result == (int) NativeGallery.Permission.Granted)
                                {
                                    Dictionary<string, object> param = new Dictionary<string, object>();
                                    Dictionary<string, object> subParam = new Dictionary<string, object>();
                                    param.Add("target", AppConst.SCAN);
                                    param.Add("params", subParam);
                                    AndroidForUnity.CallAndroidStartActivityForAnim(param.ToJson(), AppConst.ANIM_CLOUD);
                                }
                            }, (int) NativeAction.Camera);
                        }
                        else if (Application.platform == RuntimePlatform.IPhonePlayer)
                        {
                            Dictionary<string, object> param = new Dictionary<string, object>();
                            Dictionary<string, object> subParam = new Dictionary<string, object>();
                            param.Add("target", AppConst.SCAN_IOS);
                            param.Add("params", subParam);
                            IOSClientUtil.CallIOSClient(param.ToJson());
                        }
                    }
                }).AddTo(this);

             /**
              * 展示完引导页 的事件
              */
             SimpleEventSystem.GetEvent<MainPanelGuideDismiss>().Subscribe(_ =>
             {
                 this.gameObject.SetActive(true);
             }).AddTo(this);

             SimpleEventSystem.GetEvent<LottieAnimationFinish>().Subscribe(_ =>
             {
                 if (Application.platform == RuntimePlatform.IPhonePlayer)
                 {
                     if (App.IsFirstInitialize == 1)
                     {
                         AudioManager.SetMusicOn();
                         AudioManager.PlayMusic("Main_BG_Music");
                     }   
                 }
             }).AddTo(this);
            /**
             * 勋章领取成功
             */
            SimpleEventSystem.GetEvent<MedalDrawSuccess>()
                .Subscribe(_ =>
                {
                    string medalCount = TvMedal.text;
                    TvMedal.text = (medalCount.ToInt()+1).ToString();
                    if (mMedalList.Count > 0)
                    {
                        mMedalList.RemoveAt(0);
                    }
                    ShowMedalAnimationPanel();
                }).AddTo(this);
            setUserInfoData();
            StartResquestForGetUserInfo();
            RequestBabyMedalFindList();
            if (Application.platform == RuntimePlatform.Android)
            {
                NativeGallery.GetSomethingFromNative((json, action1) =>
                {
                    if (json.IsNotNullAndEmpty())
                    {
                        AppInfo model = SerializeHelper.FromJson<AppInfo>(json);
                        StartResquestForFindReleaseInfo("2", model.build);

                    }
                }, (int) NativeAction.VersionJson);
            }
            else if (Application.platform == RuntimePlatform.IPhonePlayer)
            {
                NativeGallery.GetSomethingFromIPhone(result =>
                {               
                    Debug.Log("IOS - build = "+result);
                    StartResquestForFindReleaseInfo("1", result.ToInt());
                    
                },4);
            }

            if (mData.ShopAction >= 1)
            {
                LoadingManager.GetInstance().CreatLoading();
                StartCoroutine(WaitMainPanelAnimationCompleted(mData.ShopAction));
            }
        }
        IEnumerator WaitMainPanelAnimationCompleted(int ShopAction)
        {
            while (UIManager.Instance.mIsChangingView)
            {
                yield return new WaitForSeconds(1);
            }
            
            if (mData.ShopAction == 1)
            {
                BtnEnglishShop.onClick.Invoke();
            } 
            else if (mData.ShopAction == 2)
            {
                BtnChineseShop.onClick.Invoke();
            }
            mData.ShopAction = 0;
        }

        void setUserInfoData()
        {
            UserInfo = PlayerPrefsUtil.UserInfo;
            if (UserInfo.babyInfoVo.babyLogoUrl.IsNotNullAndEmpty())
            {
                ImageDownloadUtils.Instance.SetAsyncImage(UserInfo.babyInfoVo.babyLogoUrl, ImageHead);
            } 
            else if (UserInfo.babyInfoVo.sex == 1)
            {
                ImageHead.sprite = Sprite.Create(mTexture2DHBoy,
                    new Rect(0, 0, mTexture2DHBoy.width, mTexture2DHBoy.height), Vector2.one * 0.5f);
            }
            else if (UserInfo.babyInfoVo.sex == 2)
            {
                ImageHead.sprite = Sprite.Create(mTexture2DHGirl,
                    new Rect(0, 0, mTexture2DHGirl.width, mTexture2DHGirl.height), Vector2.one * 0.5f);
            }
            TvUserName.text = UserInfo.babyInfoVo.name;
            TvGold.text = UserInfo.babyInfoVo.totalScore.ToString();
            TvMedal.text = UserInfo.medalDrawCount.ToString();
            TvUserAge.text = UserInfo.babyInfoVo.age;
            if (UserInfo.deviceId.IsNullOrEmpty())
            {
                BtnRobot.gameObject.SetActive(false);
                BtnAddRobot.gameObject.SetActive(true);
            }
            else
            {
                BtnRobot.gameObject.SetActive(true);
                BtnAddRobot.gameObject.SetActive(false); 
            }
            CheckFirstIn();
        }
        void StartResquestForFindReleaseInfo(string station, int build)
        {
            Dictionary<string, object> paramDict = new Dictionary<string, object>();
            paramDict.Add("station", station);// 1-IOS 2-Android
            paramDict.Add("build", build);
            HttpUtil.GetWithSign<VersionModel>(UrlConst.FindReleaseInfo, paramDict)
                .Subscribe(response =>
                    {
                        if(response.status == 2) {
                            UIMgr.OpenPanel<UpdateTipPanel>(new UpdateTipPanelData()
                            {
                                message = response.editionStatement,
                                url = response.appDownloadUrl,
                                version = response.version
                            });
                        } 
                        else if (response.status == 3)
                        {
                            UIMgr.OpenPanel<UpdateTipPanel>(new UpdateTipPanelData()
                            {
                                message = response.editionStatement,
                                url = response.appDownloadUrl,
                                isHideCancelButton = true,
                                version = response.version
                            });
                        }
                    }
                    , e =>
                    {
                        if (e is HttpException)
                        {
                            HttpException http = e as HttpException;
                            UIMgr.OpenPanel<LoginPanel>(new LoginPanelData(), UITransitionType.CLOUD);

                        }
                    }).AddTo(this);
        }

        /**
         * 展示勋章领取动画
         */
        void ShowMedalAnimationPanel()
        {
            if (mMedalList.Count > 0)
            {
                MedalModel.MedalBean model = mMedalList[0];
                UIMgr.OpenPanel<MedalAnimationPanel>(new MedalAnimationPanelData()
                {
                    medalModel = model,
                });
            }
            
        }
        
        void StartResquestForGetUserInfo()
        {
            Dictionary<string, object> paramDict = new Dictionary<string, object>();
            paramDict.Add("userId", PlayerPrefsUtil.GetUserId());
            HttpUtil.GetWithSign<UserInfoModel>(UrlConst.GetUserInfo, paramDict)
                .Subscribe(response =>
                    {
                        PlayerPrefsUtil.UserInfo = response;
                        setUserInfoData();
                    }
                    , e =>
                    {
                        if (e is HttpException)
                        {
                            HttpException http = e as HttpException;
                            UIMgr.OpenPanel<LoginPanel>(new LoginPanelData(), UITransitionType.CLOUD);

                        }
                    }).AddTo(this);
        }

        /**
         * 检查是否有未领取的勋章
         */
        private void RequestBabyMedalFindList()
        {
            Dictionary<string, object> paramDict = new Dictionary<string, object>();
            paramDict.Add("babyId",PlayerPrefsUtil.GetBabyId());
            HttpUtil.GetWithSign<List<MedalModel.MedalBean>>(UrlConst.FindBabyMedalList, paramDict)
                .Subscribe(result =>
                {
                    mMedalList = result;
                    if (mMedalList.Count > 0)
                    {
                        ShowMedalAnimationPanel();
                    }
                }, exception =>
                {
                    
                }).AddTo(this);
        }
        
        private void StartRequestForScanQR(string scanQR)
        {
            Dictionary<string, object> paramDict = new Dictionary<string, object>();
            paramDict.Add("content", scanQR);
            paramDict.Add("babyId", PlayerPrefsUtil.GetBabyId());
            HttpUtil.GetWithSign<QRCodeModel>(UrlConst.ScanQR, paramDict)
                .Subscribe(response =>
                    {
                        int content = response.content;
                        if(content == 1)
                        {
                            StartResquestForGetUserInfo();
                            StartRequestForBabyStudyLockInfo();
                            ScanQrCodePlanId = response.planId;
                            ScanQrCodeMonth = response.month;
                            UIMgr.OpenPanel<CollectGiftBoxPanel>(new CollectGiftBoxPanelData()
                            {
                                Type = response.subject == 1 ? CollectGiftBoxType.EnglishLearningPlan : CollectGiftBoxType.ChineseLearningPlan
                            });
                        } else if(content == 3) {
                            if (Application.platform == RuntimePlatform.Android)
                            {
                                Dictionary<string, object> param = new Dictionary<string, object>();
                                Dictionary<string, object> subParam = new Dictionary<string, object>();
                                subParam.Add("resourceId", response.id);
                                subParam.Add("subject",response.subject);
                                param.Add("target", AppConst.AUDIO_ANDROID);
                                param.Add("params", subParam);
                                Debug.Log("params ========" + subParam); 
                                AndroidForUnity.CallAndroidStartActivityForAnim(param.ToJson(), AppConst.ANIM_CIRCLE);
                            }
                            else if (Application.platform == RuntimePlatform.IPhonePlayer)
                            {
                                
                                Dictionary<string, object> param = new Dictionary<string, object>();
                                Dictionary<string, object> subParam = new Dictionary<string, object>();
                                subParam.Add("resourceId", response.id);
                                
                                subParam.Add("path",response.path);
                                subParam.Add("subject",response.subject);
                                subParam.Add("resourcePath",response.resourcePath);
                                subParam.Add("resourceTitle",response.resourceTitle);
                                subParam.Add("id",response.id);
                                
                                param.Add("target", AppConst.AUDIO_IOS);
                                param.Add("method", IOSClientUtil.AudioPlay);
                                param.Add("params", subParam);
                                Debug.Log("params ========" + subParam); 
                                
                                IOSClientUtil.CommonMethodCallIOSClient(param.ToJson());
                            }
                        } 
                    }
                    , e =>
                    {
                        if (e is HttpException)
                        {
                            HttpException http = e as HttpException;
                            Log.E("弹吐司" + http.Message);
                        }
                    }).AddTo(this);
        }
        
        private void StartRequestForBabyStudyLockInfo()
        {
            Dictionary<string, object> paramDict = new Dictionary<string, object>();
            HttpUtil.PostWithSign<List<BabyStudyLockModel>>(UrlConst.BabyStudyLockInfo, paramDict)
                .Subscribe(response =>
                    {
                        PlayerPrefsUtil.LockModels=response;
                    }
                    , e =>
                    {
                        if (e is HttpException)
                        {
                            HttpException http = e as HttpException;
                            Log.E("弹吐司" + http.Message);
                        }
                    }).AddTo(this);
        }
        
        private void StartRequestForDrawPowerSpecialPlan()
        {
            Dictionary<string, object> paramDict = new Dictionary<string, object>();
            paramDict.Add("babyId", PlayerPrefsUtil.GetBabyId());
            paramDict.Add("isNew", 1);
            HttpUtil.PostWithSign<QRCodeModel>(UrlConst.DrawPowerSpecialPlan, paramDict)
                .Subscribe(response =>
                    {
                        StartRequestForGetPlanInfo(response.planId, 0);
                    }
                    , e =>
                    {
                        if (e is HttpException)
                        {
                            HttpException http = e as HttpException;
                            Log.E("弹吐司" + http.Message);
                        }
                    }).AddTo(this);
        }
        

        /**
         * 根据计划id，从服务器获取计划详情
         */
        private void StartRequestForGetPlanInfo(int planId, int month)
        {
            if (planId == 0)
            {
                Log.E("弹吐司" + "未获取计划");
                return;
            }
            LoadingManager.GetInstance().CreatLoading();
            Dictionary<string, object> babyStudyLockInfoParam = new Dictionary<string, object>();
            babyStudyLockInfoParam.Add("planId",planId);
            babyStudyLockInfoParam.Add("babyId",PlayerPrefsUtil.UserInfo.relBabyId);
            
            Dictionary<string, object> planInfoParam = new Dictionary<string, object>();
            planInfoParam.Add("planId", planId);
            planInfoParam.Add("boxInfo", GetLocalPlanVersion(planId));// json 
            
            Observable.WhenAll(HttpUtil.PostWithSign(UrlConst.BabyStudyLockInfo, babyStudyLockInfoParam, true),
                HttpUtil.PostWithSign(UrlConst.PlanInfo, planInfoParam, true))
             .Subscribe(xs =>
             {
                 LoadingManager.GetInstance().DismissLoading();
                 if (xs.IsNull())
                 {
                     Log.I("xs is null ");
                     CommonUtil.toast("数据异常");
                     return;
                 }
                 var babyStudyLockModelEntity =xs[0].FromJson<BaseEntity<List<BabyStudyLockModel>>>();
                 var contentModelEntity = xs[1].FromJson<BaseEntity<ContentModel>>();
                 if (contentModelEntity.status == 1)
                 {
                     PlayerPrefsUtil.ContentModel =contentModelEntity.data;
                 }
                 else
                 {
                     CommonUtil.error(contentModelEntity.errCode, contentModelEntity.message, contentModelEntity.status);
                     return;
                 }
                 if (babyStudyLockModelEntity.status == 1)
                 {
                     PlayerPrefsUtil.LockModels=babyStudyLockModelEntity.data;
                 }
                 else
                 {
                     CommonUtil.error(contentModelEntity.errCode, contentModelEntity.message, contentModelEntity.status);
                     return;
                 }
                 if (contentModelEntity.data.IsNotNull())
                 {
                     UIMgr.OpenPanel<BookDayListPanel>(new BookDayListPanelData()
                     {
                         PlanId = contentModelEntity.data.planId,
                         Month = month
                     },UITransitionType.CLOUD,this);
                 }
            }, exception =>
            {
                Log.I(exception.ToString());
            }).AddTo(this);
        }

        private string GetLocalPlanVersion(int planId)
        {
             //[{"boxId":1, "boxVersion":"123"}, {"boxId":2, "boxVersion":"234"}] 
             ContentModel localModel =PlayerPrefsUtil. GetLocalContentModel(planId);
             string json = "";
             List<BoxVersion> boxVersions = new List<BoxVersion>();
             if (localModel.IsNotNull())
             {
                 foreach (var boxModel in localModel.boxList)
                 {
                     BoxVersion box = new BoxVersion();
                     box.boxId = boxModel.boxId;
                     box.boxVersion = boxModel.boxVersion;
                     boxVersions.Add(box); 
                 }
             }

             if (boxVersions.Count > 0)
             {
                
                 json =  JsonConvert.SerializeObject(boxVersions, Formatting.None);
             }
             return json;
        }

        
        /**
         * 获取随便听听地址
         */
        private void StartRequestForGetResourcePageUrl()
        {
            Dictionary<string, object> paramDict = new Dictionary<string, object>();
            paramDict.Add("userId", PlayerPrefsUtil.GetUserId());
            if (Application.platform == RuntimePlatform.Android)
            {
                paramDict.Add("client", "android");
            }
            else
            {
                paramDict.Add("client", "ios");
            }
            HttpUtil.GetWithSign<string>(UrlConst.GetResourcePageUrl, paramDict)
                .Subscribe(response =>
                    {
                        if (Application.platform == RuntimePlatform.Android)
                        {
                            Dictionary<string, object> param = new Dictionary<string, object>();
                            param.Add("target", AppConst.WEBVIEW);
                            Dictionary<string, object> subParam = new Dictionary<string, object>();
                            subParam.Add("url", response);
                            subParam.Add("title", "随便听听");
                            param.Add("params", subParam);
                            AndroidForUnity.CallAndroidStartActivityForAnim(param.ToJson(), AppConst.ANIM_CLOUD);
                        }
                        else if (Application.platform == RuntimePlatform.IPhonePlayer)
                        {
                            Dictionary<string, object> param = new Dictionary<string, object>();
                            param.Add("target", AppConst.WKWEBVIEW_IOS);
                            Dictionary<string, object> subParam = new Dictionary<string, object>();
                            subParam.Add("webUrl", response);
                            subParam.Add("title", "随便听听");
                            param.Add("params", subParam);
                            IOSClientUtil.CallIOSClient(param.ToJson());
                        }
                    }
                    , e =>
                    {
                        if (e is HttpException)
                        {
                            HttpException http = e as HttpException;
                            Log.E("弹吐司" + http.Message);
                        }
                    }).AddTo(this);
        }

        protected override void OnClose()
        {
            AudioManager.SetMusicOff();
            mMainAnimationGo.SetActive(false);
            GameObject.Destroy(mMainAnimationGo);
            mMainAnimationGo = null;
            mResLoader.Recycle2Cache();
            mResLoader = null;
            mTexture2DHBoy = null;
            mTexture2DHGirl = null;
            LoadingManager.GetInstance().DismissLoading();
            StopAllCoroutines();
        }

        private void CheckFirstIn()
        {
            ImgChineseNoBind.gameObject.SetActive(UserInfo.chPlanId == 0);
            ImgEnglishNoBind.gameObject.SetActive(UserInfo.enPlanId == 0);
            ImgLearningNoBind.gameObject.SetActive(false);
            if (PlayerPrefsUtil.IsFirstIn())
            {
                UIMgr.OpenPanel<MainGuidePanel>();
                this.gameObject.SetActive(false);
            }
        }

        public class BoxVersion
        {
            public int boxId;
            public string boxVersion;
        }
    }
}
