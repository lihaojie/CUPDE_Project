//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using QFramework;
using UniRx;

namespace SuperKid
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.UI;
    using DG.Tweening;
    public enum ItemType
    {
        AUDIO,
        VIDEO,
        PICBOOK
    }

    public class ListItemPanelData : QFramework.UIPanelData
    {
        public ItemType FunTag = ItemType.AUDIO;
    }
    
    public partial class ListItemPanel : QFramework.UIPanel
    {
        public List<DayActionModel> videoList = new List<DayActionModel>(); //视频列表
        public List<DayActionModel> audioList = new List<DayActionModel>(); //音频列表
        public List<DayActionModel> picBookList = new List<DayActionModel>(); //绘本列表
        private ResLoader mResLoader = ResLoader.Allocate();
        
        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
             
        }
        
        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as ListItemPanelData ?? new ListItemPanelData(); 
            string NoDataImageName = PlayerPrefsUtil.ContentModel.isPowerPlan != 1&&PlayerPrefsUtil.ContentModel.subject == 1?"en_nodata":"cn_nodata";
            var loadSprite = mResLoader.LoadSync<Texture2D>(NoDataImageName);
            NoData.sprite = Sprite.Create(loadSprite, new Rect(0, 0, loadSprite.width, loadSprite.height), Vector2.one * 0.5f);
            NoData.gameObject.SetActive(false);
            BtnBack.onClick.AddListener(() =>
            {
                AudioManager.PlaySound("Button_Audio");
                Back();
            });
            ImgAudio.onClick.AddListener(ShowAudio);
            ImgPicBook.onClick.AddListener(ShowPicBook);
            ImgVideo.onClick.AddListener(ShowVideo);

            if (mData.FunTag == ItemType.AUDIO)
            {
                ShowAudio();
                ImgAudio.GetComponent<ListItemButtonEffect>().IsBig.Value =true;
            }else if (mData.FunTag == ItemType.PICBOOK)
            {
                ShowPicBook();
                ImgPicBook.GetComponent<ListItemButtonEffect>().IsBig.Value =true;
            }else 
            {
                ShowVideo();
                ImgVideo.GetComponent<ListItemButtonEffect>().IsBig.Value =true;
            }
        }
        
        protected override void OnClose()
        {
            mResLoader.Recycle2Cache();
            mResLoader = null;
            videoList.Clear(); 
            audioList.Clear(); 
            picBookList.Clear();
            videoList = null;
            audioList = null;
            picBookList = null;
        }

        public void ShowVideo()
        {

            VideoScrollView.gameObject.SetActive(true);
            AudioScrollView.gameObject.SetActive(false);
            PicBookScrollView.gameObject.SetActive(false);
            if (VideoScrollView.Find("Viewport").Find("Content").childCount > 0)
            {
                NoData.gameObject.SetActive(false);
                return;
            }
            // 创建视频Item
            var index = PlayerPrefsUtil.GetBoxMonthIndex();
            var total = PlayerPrefsUtil.ContentModel.boxList[index].videoList;
            for (int i = 0; i < total.Count; i++)
            {
                var model = total[i];
                if (isCotainCheck(model))
                {
                    videoList.Add(model); 
                }
            }
            DoCreateVideoItem(videoList);
        }
        
        private void DoCreateVideoItem(List<DayActionModel> videoList)
        {
            for (var i = 0; i < videoList.Count; i++)
            {
                var video = videoList[i];
                mResLoader.LoadSync<GameObject>("ItemVideo")
                    .Instantiate()
                    .transform
                    .LocalIdentity()
                    .Parent(VideoScrollView.Find("Viewport").Find("Content")) 
                    .LocalScale(1,1,1)
                    .ApplySelfTo(itemVideo =>
                    {
                        var image = itemVideo.transform.Find("Video_Btn").Find("Image").Find("Video_Image")
                            .GetComponent<Image>(); 
                        ImageDownloadUtils.Instance.SetAsyncImage(video.thumbnailPath, image);
                        var name = itemVideo.transform.Find("Video_Btn").Find("V_Text").GetComponent<Text>();
                        name.text = video.name;
                        itemVideo.transform.Find("Video_Btn").GetComponent<Button>().onClick.RemoveAllListeners();
                        itemVideo.transform.Find("Video_Btn").GetComponent<Button>().onClick
                            .AddListener(delegate { OnVideoClick(video); });
                    })
                    .Show();
            }
            if (videoList.Count== 0)
            {
                NoData.gameObject.SetActive(true);
                NoData.transform.Find("Text").GetComponent<Text>().text = "暂无已解锁视频哦～";
            }
            else
            {
                NoData.gameObject.SetActive(false);
            }
        }
        private void OnVideoClick(DayActionModel dayActionModel)
        {
            AudioManager.PlaySound("Button_Audio");
            var param = new Dictionary<string, object>();
            var subParam = new Dictionary<string, object>();
            subParam.Add("resourceId", dayActionModel.resourceId);
            if (Application.platform == RuntimePlatform.Android)
            {
                param.Add("target", AppConst.VIDEO_ANDROID);
                param.Add("params", subParam); 
                AndroidForUnity.CallAndroidStartActivityForAnim(param.ToJson(), AppConst.ANIM_CIRCLE);
            }
            else
            {
                param.Add("target", AppConst.VIDEO_IOS);
                param.Add("params", subParam); 
                IOSClientUtil.CallIOSClient(param.ToJson());
            }
        }
        #region 绘本相关
        public void ShowPicBook()
        {
            
            VideoScrollView.gameObject.SetActive(false);
            AudioScrollView.gameObject.SetActive(false);
            PicBookScrollView.gameObject.SetActive(true);
            if (PicBookScrollView.Find("Viewport").Find("Content").childCount > 0)
            {
                NoData.gameObject.SetActive(false);
                return;
            }

            // 创建视频Item
            var index = PlayerPrefsUtil.GetBoxMonthIndex();
            // 取出该盒子下的绘本列表
            var total = PlayerPrefsUtil.ContentModel.boxList[index].picBookList;
            for (int i = 0; i < total.Count; i++)
            {
                var model = total[i];

                if (isCotainCheck(model))
                {
                    picBookList.Add(model);
                }
            }

            DoCreatePicBookItem(picBookList);
            // 填充绘本列表数据
        }
  
         private void DoCreatePicBookItem(List<DayActionModel> picBookModel)
            {
                int row=picBookModel.Count / 3;
                int column = picBookModel.Count % 3;
                for (int i = 0; i < row; i++)
                {
                    Transform itemPickBookGroup = mResLoader.LoadSync<GameObject>("ItemPicBookGroup")
                        .Instantiate()
                        .transform
                        .LocalIdentity()
                        .Parent(PicBookScrollView.Find("Viewport").Find("Content"))
                        .LocalScale(1, 1, 1)
                        .Show();
                    for (int j = 0; j < 3; j++)
                    {
                        int index = (i * 3 + j); 
                        var bookBean = picBookModel[index];
                        GameObject itemPickBook =itemPickBookGroup.transform.Find(j.ToString()).gameObject;
                        itemPickBook.name = index.ToString();
                        var image = itemPickBook.transform.Find("MaskImage").Find("Image").GetComponent<Image>();
                        ImageDownloadUtils.Instance.SetAsyncImage(bookBean.thumbnailPath, image);
                        var name = itemPickBook.transform.Find("ImageBottom/Text").GetComponent<Text>();
                        name.text = bookBean.name;
                        itemPickBook.transform.GetComponent<Button>().onClick.RemoveAllListeners();
                        itemPickBook.transform.GetComponent<Button>().onClick
                            .AddListener(delegate { OnClickPicBook(itemPickBook, bookBean); });
                    }
                }

                if (column == 1)
                {
                    Transform itemPickBookGroup = mResLoader.LoadSync<GameObject>("ItemPicBookGroup")
                        .Instantiate()
                        .transform
                        .LocalIdentity()
                        .Parent(PicBookScrollView.Find("Viewport").Find("Content")) 
                        .LocalScale(1,1,1)
                        .Show();            int index = row * 3; 
                    var bookBean = picBookModel[index];
                    GameObject itemPickBook =itemPickBookGroup.transform.Find(1.ToString()).gameObject;
                    itemPickBook.name = index.ToString();
                    var image = itemPickBook.transform.Find("MaskImage").Find("Image").GetComponent<Image>();
                    Debug.Log("image ===" + bookBean.thumbnailPath);
                    ImageDownloadUtils.Instance.SetAsyncImage(bookBean.thumbnailPath, image);
                    var name = itemPickBook.transform.Find("ImageBottom/Text").GetComponent<Text>();
                    name.text = bookBean.name;
                    itemPickBook.transform.GetComponent<Button>().onClick.RemoveAllListeners();
                    itemPickBook.transform.GetComponent<Button>().onClick
                        .AddListener(delegate { OnClickPicBook(itemPickBook, bookBean); });
                    GameObject itemPickBook0 =itemPickBookGroup.transform.Find(0.ToString()).gameObject;
                    itemPickBook0.SetActive(false);
                    GameObject itemPickBook2 =itemPickBookGroup.transform.Find(2.ToString()).gameObject;
                    itemPickBook2.SetActive(false); 
                }
                else if (column == 2)
                {
                    Transform itemPickBookGroup = mResLoader.LoadSync<GameObject>("ItemPicBookGroup")
                        .Instantiate()
                        .transform
                        .LocalIdentity()
                        .Parent(PicBookScrollView.Find("Viewport").Find("Content")) 
                        .LocalScale(1,1,1)
                        .Show();            int index = row * 3; 
                    var bookBean = picBookModel[index];
                    GameObject itemPickBook =itemPickBookGroup.transform.Find(0.ToString()).gameObject;
                    itemPickBook.name = index.ToString();
                    var image = itemPickBook.transform.Find("MaskImage").Find("Image").GetComponent<Image>();
                    Debug.Log("image ===" + image);
                    ImageDownloadUtils.Instance.SetAsyncImage(bookBean.thumbnailPath, image);
                    var name = itemPickBook.transform.Find("ImageBottom/Text").GetComponent<Text>();
                    name.text = bookBean.name;
                    itemPickBook.transform.GetComponent<Button>().onClick.RemoveAllListeners();
                    itemPickBook.transform.GetComponent<Button>().onClick
                        .AddListener(delegate { OnClickPicBook(itemPickBook, bookBean); });
                    GameObject itemPickBook0 =itemPickBookGroup.transform.Find(2.ToString()).gameObject;
                    itemPickBook0.SetActive(false);
                    
                    GameObject itemPickBook2 =itemPickBookGroup.transform.Find(1.ToString()).gameObject;
                    index = row * 3+1; 
                    bookBean = picBookModel[index]; 
                    itemPickBook2.name = index.ToString();
                    var image1 = itemPickBook2.transform.Find("MaskImage").Find("Image").GetComponent<Image>(); 
                    ImageDownloadUtils.Instance.SetAsyncImage(bookBean.thumbnailPath, image1);
                    itemPickBook2.transform.Find("ImageBottom/Text").GetComponent<Text>().text = bookBean.name;
                    itemPickBook2.transform.GetComponent<Button>().onClick.RemoveAllListeners();
                    itemPickBook2.transform.GetComponent<Button>().onClick
                        .AddListener(delegate { OnClickPicBook(itemPickBook, bookBean); });
                }
                if (picBookModel.Count== 0)
                {
                    NoData.gameObject.SetActive(true);
                    NoData.transform.Find("Text").GetComponent<Text>().text = "暂无已解锁绘本哦～";
                }
                else
                {
                    NoData.gameObject.SetActive(false);
                }
            }
        private void OnClickPicBook(GameObject itemPickBook, DayActionModel dayActionModel)
        { 
            AudioManager.PlaySound("Button_Audio");
            UIMgr.OpenPanel<BookDetailPanel>(new BookDetailPanelData()
            {
                DayActionModel=dayActionModel
            },UITransitionType.CIRCLE,this);
        }
        

        #endregion
      
        #region 显示音频

         public void ShowAudio()
        {

            VideoScrollView.gameObject.SetActive(false);
            AudioScrollView.gameObject.SetActive(true);
            PicBookScrollView.gameObject.SetActive(false);
            if (AudioScrollView.Find("Viewport").Find("Content").childCount > 0)
            {
                NoData.gameObject.SetActive(false);
                return;
            }
            // 创建视频Item
            var index = PlayerPrefsUtil.GetBoxMonthIndex();
                // 取出该盒子下的音频列表
            var total = PlayerPrefsUtil.ContentModel.boxList[index].audioList;
            for (int i = 0; i < total.Count; i++)
            {
                var model = total[i];
                if (isCotainCheck(model))
                {
                    audioList.Add(model);
                }
            }
            DoCreateAudioItem(audioList);
        }
        
        private void DoCreateAudioItem(List<DayActionModel> audioModel)
        {
            audioModel.ForEach(audio =>
            {
                mResLoader.LoadSync<GameObject>("ItemAudio")
                    .Instantiate()
                    .transform
                    .LocalIdentity()
                    .Parent(AudioScrollView.Find("Viewport").Find("Content")) 
                    .LocalScale(1,1,1)
                    .ApplySelfTo(audioItem =>
                    {
                        var image = audioItem.transform.Find("Image").Find("Image").GetComponent<Image>();
                        ImageDownloadUtils.Instance.SetAsyncImage(audio.thumbnailPath, image);
                        var name = audioItem.transform.Find("ImageBottom/Text").GetComponent<Text>();
                        name.text = audio.name;
                        audioItem.GetComponent<Button>().onClick.RemoveAllListeners();
                        audioItem.GetComponent<Button>().onClick
                            .AddListener(delegate { OnClickAudio(audio); });
                    })
                    .Show();
            });
            if (audioModel.Count== 0)
            {
                NoData.gameObject.SetActive(true);
                NoData.transform.Find("Text").GetComponent<Text>().text = "暂无已解锁音频哦～";
            }
            else
            {
                NoData.gameObject.SetActive(false);
            }
        }

        private void OnClickAudio(DayActionModel actionModel)
        {
            AudioManager.PlaySound("Button_Audio");
            var param = new Dictionary<string, object>();
            var subParam = new Dictionary<string, object>();
            subParam.Add("resourceId", actionModel.resourceId);
            subParam.Add("planId", PlayerPrefsUtil.ContentModel.planId);
            subParam.Add("boxId", actionModel.boxId);
            subParam.Add("subject", PlayerPrefsUtil.ContentModel.subject);
            if (Application.platform == RuntimePlatform.Android)
            {
       
                param.Add("target", AppConst.AUDIO_ANDROID);
                param.Add("params", subParam);

                AndroidForUnity.CallAndroidStartActivityForAnim(param.ToJson(), AppConst.ANIM_CIRCLE);
            }
            else
            {
                param.Add("target", AppConst.AUDIO_IOS);
                param.Add("params", subParam);
                IOSClientUtil.CallIOSClient(param.ToJson());
            }
        }

        #endregion
       
        
        private bool isCotainCheck(DayActionModel model)
        {
            var lockModel = PlayerPrefsUtil.LockModels;
            foreach (var lockBean in lockModel)
            {
                if (lockBean.boxId == model.boxId)
                {
                    if (model.days != null && model.days.Count > 0)
                    {
                        foreach (var day in model.days)
                        {
                            if (lockBean.day >= day)
                            {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }
    }
    
    
    
}
