//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using QFramework;
using SuperKid.Utils;
using UniRx;

namespace SuperKid
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.UI;
    
    
    public class AttendanceAudioRecordPanelData : QFramework.UIPanelData
    {
    }
    
    public partial class AttendanceAudioRecordPanel : QFramework.UIPanel
    {
        private string path;
        private ResLoader mResLoader = ResLoader.Allocate();
        private float mRecordTime = 0f;

        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as AttendanceAudioRecordPanelData ?? new AttendanceAudioRecordPanelData();
            BtnBack.onClick.AddListener(() =>
            {
                AudioManager.PlaySound("Button_Audio");
                Back();
            });
           BtnRecord.onClick.AddListener(() =>
           {
               AudioManager.PlaySound("Button_Audio");
               if ( MicrophoneManager.GetInstance().mRecordStatus.Value == RecordStatus.NoRecord)
               {
                   MicrophoneManager.GetInstance().StartRecord(); 
               }else if ( MicrophoneManager.GetInstance().mRecordStatus.Value == RecordStatus.Recording)
               {
                   MicrophoneManager.GetInstance().PauseRecord();
               }else if ( MicrophoneManager.GetInstance().mRecordStatus .Value == RecordStatus.Pause)
               {
                   MicrophoneManager.GetInstance().StartRecord(); 
               }
           });
           BtnComplete.onClick.AddListener(() =>
           {
               AudioManager.PlaySound("Button_Audio");
               if ((int)MicrophoneManager.GetInstance().mRecordTime < MicrophoneManager.MIN_TIME)
               {
                   CommonUtil.toast("音频时长过短");
                   Log.I("音频时长过短");
               }
               else
               {
                   MicrophoneManager.GetInstance().StopRecord();
               }
           });
          
           MicrophoneManager.GetInstance().mRecordStatus.Subscribe(RecordStatus =>
           {
               if (RecordStatus == RecordStatus.NoRecord)
               {
                   var soundOnTexture = mResLoader.LoadSync<Texture2D>("audio_record");
                   BtnRecord.GetComponent<Image>().sprite = Sprite.Create(soundOnTexture, new Rect(0, 0, soundOnTexture.width, soundOnTexture.height), Vector2.one * 0.5f);
                   TvTime.gameObject.SetActive(false);
                   BtnComplete.gameObject.SetActive(false);
                   // <b>加粗</b> 
                   string time = "<color=#FF9E47><size=24>音频5分钟内</size></color>";
                   TvRecord.text = "点击开始录音\n" + time;
               }else if (RecordStatus == RecordStatus.Recording)
               {
                   var soundOnTexture = mResLoader.LoadSync<Texture2D>("audio_recording");
                   BtnRecord.GetComponent<Image>().sprite = Sprite.Create(soundOnTexture, new Rect(0, 0, soundOnTexture.width, soundOnTexture.height), Vector2.one * 0.5f);
                    TvTime.gameObject.SetActive(true);
                    BtnComplete.gameObject.SetActive(true);
                    TvRecord.text = "录制中...\n点击完成结束录音";
               }else if (RecordStatus == RecordStatus.Pause)
               {
                   var soundOnTexture = mResLoader.LoadSync<Texture2D>("audio_pause_record");
                   BtnRecord.GetComponent<Image>().sprite = Sprite.Create(soundOnTexture, new Rect(0, 0, soundOnTexture.width, soundOnTexture.height), Vector2.one * 0.5f);
                   TvTime.gameObject.SetActive(true);
                   BtnComplete.gameObject.SetActive(true);
                   TvRecord.text = "暂停";
               }else if (RecordStatus == RecordStatus.RecordComplete)
               {
                   MicrophoneManager.GetInstance().Save(out path);
                   if (path.IsNotNullAndEmpty())
                   {
                       SimpleEventSystem.Publish(new RecordPath(path));
                   }
                   Close();
               }
           }).AddTo(this);
        }

        private void Update()
        {
            if (TvTime.IsActive())
            {
                TvTime.text = StringUtil.SecondsToMinutes((int) MicrophoneManager.GetInstance().mRecordTime);
                if ((int)MicrophoneManager.GetInstance().mRecordTime == (MicrophoneManager.RECORD_TIME - 1))
                {
                    if (MicrophoneManager.GetInstance().mRecordStatus.Value != RecordStatus.RecordComplete)
                    {
                        MicrophoneManager.GetInstance().StopRecord();
                    }
                } else if (((int)MicrophoneManager.GetInstance().mRecordTime) >= (MicrophoneManager.RECORD_TIME - 1 - 10))
                {
                    string time = "<color=#FF9E47>"+(MicrophoneManager.RECORD_TIME - 1 - (int)MicrophoneManager.GetInstance().mRecordTime)+"s </color>";
                    TvRecord.text = "录制中...\n" + time + " 结束录音";
                }
                else
                {
                    TvRecord.text = "录制中...\n点击完成结束录音";
                }
            }
        }

        protected override void OnClose()
        {
            if (MicrophoneManager.GetInstance().mRecordStatus.Value == RecordStatus.Recording)
            {
                MicrophoneManager.GetInstance().PauseRecord();
            }
            MicrophoneManager.GetInstance().mRecordStatus.Value = RecordStatus.NoRecord;
            MicrophoneManager.GetInstance().mPlayStatus.Value = PlayStatus.NoPlaying;
            MicrophoneManager.GetInstance().Destory();
            if (mResLoader.IsNotNull())
            {
                mResLoader .Recycle2Cache();
                mResLoader = null;
            }
        }
    }
}
