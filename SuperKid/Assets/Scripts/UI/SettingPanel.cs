//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using QFramework;
using SuperKid.Utils;
using UniRx;

namespace SuperKid
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.UI;
    
    
    public class SettingPanelData : QFramework.UIPanelData
    {
    }
    
    public partial class SettingPanel : QFramework.UIPanel
    {
        
        
        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as SettingPanelData ?? new SettingPanelData();
            // please add init code here
            
            if (PlayerPrefsUtil.GetDeviceId().IsNullOrEmpty())
            {
                ToggleDevice.gameObject.SetActive(false);
            }
            else
            {
                ToggleDevice.gameObject.SetActive(true);
            }
            BtnBack.onClick.AddListener(() =>
            {
                AudioManager.PlaySound("Button_Audio");
                Back();
            });
            BtnLogout.onClick.AddListener(() =>
            {
                AudioManager.PlaySound("Button_Audio");
                UIMgr.OpenPanel<TipPanel>(new TipPanelData()
                {
                    action = TipAction.Logout,
                    message = "确定退出登录吗？",
                    strTitle = "dola提示"
                });
            });
            
            SimpleEventSystem.GetEvent<TipConfirmClick>()
                .Subscribe(_ =>
                {
                    if (_.GetAction == TipAction.Logout)
                    {
                        // 弹窗提示，确定后，清除本地用户信息、清空list，打开login
                        CommonUtil.logout();
                    }
                }).AddTo(this);
            BtnShare.onClick.AddListener(() =>
            {
                AudioManager.PlaySound("Button_Audio");
                if (Application.platform == RuntimePlatform.Android)
                {
                    Dictionary<string, object> param = new Dictionary<string, object>();
                    Dictionary<string, object> subParam = new Dictionary<string, object>();
                    param.Add("target", AppConst.Share);
                    param.Add("params", subParam);
                    AndroidForUnity.CallAndroidStartActivity(param.ToJson());
                }
                else if (Application.platform == RuntimePlatform.IPhonePlayer)
                {
                    Dictionary<string, object> paramDic = new Dictionary<string, object>();
                    Dictionary<string, object> subParam = new Dictionary<string, object>();
                    paramDic.Add("method",IOSClientUtil.SettingShare);
                    paramDic.Add("params",subParam);
                    IOSClientUtil.CommonMethodCallIOSClient(paramDic.ToJson());
                }
            });
        }

        private void Update()
        {
           
        }

        protected override void OnClose()
        {
        }
    }
}
