//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SuperKid
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.UI;
    using QFramework;
    using Utils;
    using Entity;
    using UniRx;
    
    
    public class CreateOrderPanelData : QFramework.UIPanelData
    {
        
        public GoodMedal mGoodModel = new GoodMedal();
        /**
         * 商品兑换详情(如果订单为空 则认为是创建订单页面)
         */
        public int orderId = 0;
    }
    
    public partial class CreateOrderPanel : QFramework.UIPanel
    {

        private AddressInfoModel.AddressInfo mAddressInfo = new AddressInfoModel.AddressInfo();
        private OrderDetailModel orderDetailModel;
        private bool IsCreatingOrder;
        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as CreateOrderPanelData ?? new CreateOrderPanelData();
            ShowOrderORCreatOrder();
            BtnBack.onClick.AddListener(() => { Back();});
            BtnPlusAddress.OnClickAsObservable().Subscribe(_ =>
            {
                UIMgr.OpenPanel<AddressEditPanel>(new AddressEditPanelData(),UITransitionType.CIRCLE);
            }).AddTo(this);
            BtnEditAddress.OnClickAsObservable().Subscribe(_ =>
            {
                UIMgr.OpenPanel<AddressListPanel>(new AddressListPanelData(),UITransitionType.CIRCLE);
            }).AddTo(this);

            BtnConfirm.OnClickAsObservable().Subscribe(_ =>
            {
                if (!IsCreatingOrder)
                {
                    RequestCreatOrder();
                }
            }).AddTo(this);

            SimpleEventSystem.GetEvent<ExchangeOrderAddress>().Subscribe(exchangeOrderAddress =>
            {
                AddressInfoData(exchangeOrderAddress.AddressInfo);
            }).AddTo(this);

            SimpleEventSystem.GetEvent<UpdateAddressDate>().Subscribe(result =>
            {
                RequestAddressList();
            }).AddTo(this);
            
            SimpleEventSystem.GetEvent<CollectGiftBoxPanelClosed>().Subscribe(res =>
            {
                if (res.CollectGiftBoxType == CollectGiftBoxType.Exchange)
                {
                    ShowOrderORCreatOrder();
                }
            }).AddTo(this);
        }


        private void SetGoodData()
        {
            if (mData.mGoodModel.IsNull())
            {
                return;
            }
            ImageDownloadUtils.Instance.SetAsyncImage(mData.mGoodModel.icon, ImgGoodIcon);
            TextGoodName.text = mData.mGoodModel.name;
            TextGoodScore.text = String.Format("{0}积分",mData.mGoodModel.exchangePrice);
            TextGoodPrice.text = String.Format("{0}",(mData.mGoodModel.price / 100.0).ToString("F2"));
            TextExchangeScore.text = String.Format("{0}积分",mData.mGoodModel.exchangePrice);
        }

        private void ShowOrderORCreatOrder()
        {
            if (mData.orderId == 0) // 创建订单
            {
                TextTitle.text = "确认订单";
                ShowOrder.gameObject.SetActive(false);
                MakeOrder.gameObject.SetActive(true);
                RequestAddressList();
                SetGoodData();
            }
            else // 展示订单
            {
                TextTitle.text = "订单详情";
                ShowOrder.gameObject.SetActive(true);
                MakeOrder.gameObject.SetActive(false);
                if (orderDetailModel.IsNull())
                {
                    RequestShowOrderMsg(mData.orderId);
                }
                else
                {
                    OrderDetailData(orderDetailModel);
                }

                PlusAddress.gameObject.SetActive(false);
                EditAddress.gameObject.SetActive(true);
                BtnEditAddress.gameObject.SetActive(false);
            }
        }
        
        /**
         * type 1展示地址 2 需要添加地址
         */
        private void ShowAddressORPlusAddress(int type)
        {
            if (type == 1) // 展示地址
            {
                PlusAddress.gameObject.SetActive(false);
                EditAddress.gameObject.SetActive(true);
            }
            else if (type == 2) // 需要添加地址
            {
                PlusAddress.gameObject.SetActive(true);
                EditAddress.gameObject.SetActive(false);
            }
        }

        private void AddressInfoData(AddressInfoModel.AddressInfo addressModel)
        {
            if (addressModel.IsNull()) return;
            mAddressInfo = addressModel;
            string userName = String.Empty;
            userName = addressModel.consignee;
            if (addressModel.consignee.Length >=10)
            {
                userName = String.Format("{0}...",addressModel.consignee.Substring(0, 10));
            }
            TextUserName.text = userName;
            TextUserMobile.text = addressModel.consigneeMobile;
            TextUserAddress.text = String.Format("{0}{1}{2}{3}",addressModel.provinceName,addressModel.cityName,addressModel.areaName,addressModel.consigneeAddress);
        }

        private void OrderDetailData(OrderDetailModel model)
        {
            
            TextUserName.text = model.consignee;
            TextUserMobile.text = model.consigneeMobile;
            TextUserAddress.text = String.Format("{0}{1}{2}{3}",model.provinceName,model.cityName,model.areaName,model.consigneeAddress);
            ImageDownloadUtils.Instance.SetAsyncImage(model.icon, ImgGoodIcon);
            TextGoodName.text = model.goodsName;
            TextGoodScore.text = String.Format("{0}积分",model.orderPrice.ToString());
            TextGoodPrice.text = String.Format("{0}",(model.goodsCost / 100.0).ToString("F2"));
            TextExchangeScore.text = String.Format("{0}积分",model.goodsCost);
            TextOderNum.text = String.Format("订单编号: {0}",model.orderNo);
        }



        #region 网络请求
        
        /**
         * 确定订单
         */
        private void RequestCreatOrder()
        {
            IsCreatingOrder = true;
            Dictionary<string, object> paramDict = new Dictionary<string, object>();
            if (PlayerPrefsUtil.UserInfo == null)
            {
                Debug.Log("数据异常，请重新登录");
                CommonUtil.toast("数据异常，请重新登录");
                return;
            }

            if (mAddressInfo.IsNull())
            {
                CommonUtil.toast("请选择收货地址");
                return;
            }
            paramDict.Add("babyId",PlayerPrefsUtil.UserInfo.relBabyId);
            paramDict.Add("goodsId",mData.mGoodModel.id);
            paramDict.Add("babyAddressId",mAddressInfo.id);
            paramDict.Add("goodsNum",1);
            paramDict.Add("orderPrice",mData.mGoodModel.exchangePrice);
            HttpUtil.PostWithSign<OrderDetailModel>(UrlConst.OrderAdd, paramDict,null,null)
                .Subscribe(response =>
                    {
                        IsCreatingOrder = false;
                        mData.orderId = response.id;
                        orderDetailModel = response;
                        
                        UIMgr.OpenPanel<CollectGiftBoxPanel>(new CollectGiftBoxPanelData()
                        {
                            Type = CollectGiftBoxType.Exchange
                        }); 
                    }
                    , e =>
                    {
                        IsCreatingOrder = false;
                        
                    }).AddTo(this);
        }
        
        /**
         * 订单详情 
         */
        private void RequestShowOrderMsg(int orderId)
        {
            
            Dictionary<string, object> paramDict = new Dictionary<string, object>();
            if (PlayerPrefsUtil.UserInfo == null)
            {
                Debug.Log("数据异常，请重新登录");
                CommonUtil.toast("数据异常，请重新登录");
                return;
            }
            paramDict.Add("id",orderId); 
            HttpUtil.GetWithSign<OrderDetailModel>(UrlConst.OrderOne, paramDict)
                .Subscribe(response =>
                    {
                        Log.I(response.ToJson());
                        OrderDetailData(response);
                    }
                    , e =>
                    {
                        if (e is HttpException)
                        {
                            HttpException http = e as HttpException;
                            Log.E("弹吐司" + http.Message);
                        }
                    }).AddTo(this);
            
        }
        
        /**
         * 请求地址
         */
        private void RequestAddressList()
        {
            Dictionary<string, object> paramDict = new Dictionary<string, object>();
            if (PlayerPrefsUtil.UserInfo == null)
            {
                Debug.Log("数据异常，请重新登录");
                CommonUtil.toast("数据异常，请重新登录");
                return;
            }
            paramDict.Add("babyId",PlayerPrefsUtil.UserInfo.relBabyId);
            paramDict.Add("pageSize",9999);
            paramDict.Add("pageNum",1); 
            HttpUtil.GetWithSign<AddressInfoModel>(UrlConst.BabyAddressListPage, paramDict)
                .Subscribe(response =>
                    {
                        if (response.records.Count > 0) // 有地址
                        {
                            AddressInfoData(response.records[0]);
                            ShowAddressORPlusAddress(1);
                        }
                        else
                        {
                            ShowAddressORPlusAddress(2);
                        }
                    }
                    , e =>
                    {
                        if (e is HttpException)
                        {
                            HttpException http = e as HttpException;
                            Log.E("弹吐司" + http.Message);
                        }
                    }).AddTo(this);
        }


        #endregion

        protected override void OnClose()
        {
        }
    }
}
